<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:space="preserve">
    <head>
        <link href="../Resources/Stylesheets/styles.css" rel="stylesheet" />
    </head>
    <body>
        <h1 MadCap:autonum=""><a name="introduction_1675518870_1015859"></a><a name="introduction_1675518870_42701"></a>How does it work?</h1>
        <p class="BodyAfterHead"><span class="_Override" style="font-weight: bold;"><MadCap:variable name="HSS.hys_doc" style="font-weight: normal;" /></span> uses a client server architecture based on a centralized <MadCap:variable name="HSS.ade" /> (ADE) database (<MadCap:xref href="#hss_architecture" class="figure_x">see Figure</MadCap:xref>).</p>
        <div class="figure">
            <img src="../Resources/Images/Images_Topics_HSS/HSS_architecture.png" style="margin-left: 70, 1928px;margin-top: 7, 68744px;margin-right: 13, 59937px;margin-bottom: 2, 805832px;width: 682px;height: 316px;" MadCap:mediastyle="@media print { width: 600px;height: auto; }" />
            <p class="Figure" MadCap:autonum="&lt;b&gt;Figure&lt;b&gt;: &lt;/b&gt;&lt;/b&gt;"><a name="hss_architecture"></a><MadCap:variable name="General.ProductNameHSS" /> in a client-server architecture</p>
        </div>
        <h2 MadCap:autonum="">Server component</h2>
        <p class="BodyAfterHead">The server component consists of the <MadCap:variable name="HSS.ade" /> and stream files. <MadCap:variable name="HSS.ade" /> is composed of a database that keeps track of all the data blocks stored, and the repository where data is actually stored. The database should be installed on a fast access disk as it is constantly queried by clients. A Solid State Drive (i.e., SSD) is highly recommended, and is mandatory for <MadCap:annotation MadCap:createDate="2020-06-12T15:03:06.6418469+02:00" MadCap:creator="tychom" MadCap:initials="TY" MadCap:comment="Hyperlink to Sizing Guide in the User Group" MadCap:editor="tychom" MadCap:editDate="2020-06-12T15:03:33.3340484+02:00">large configurations</MadCap:annotation>. The repository should be located on a volume with plenty of available disk space. </p>
        <p class="Body">The server listens to any incoming request from authorized clients and stores: </p>
        <p class="Bulleted" MadCap:autonum="• "><span class="Lead-In">Block digests</span>
        </p>
        <p class="BulletedCont">The digest is a unique signature identifying a block content. The digest is used to compare blocks and decide whether a block is new or already exists in the repository. </p>
        <p class="Bulleted" MadCap:autonum="• "><span class="Lead-In">Data blocks</span>
        </p>
        <p class="BulletedCont">Stored blocks are unique that are sent by clients only if they do not already exist in the repository.</p>
        <p class="Bulleted" MadCap:autonum="• "><span class="Lead-In">Stream files</span>
        </p>
        <p class="BulletedCont">A stream file contains the digests from all the blocks in a single backup stream. Even the blocks that are not sent by the client because they already exist, are stored in the stream file. The stream file reflects the original backup stream contents and is used for restore purposes. There is one stream file per <MadCap:variable name="HSS.tn" /> backup job.</p>
        <p class="BulletedCont">The stream file also contains metadata, OS and SIDF type metadata as well as name, type, beginning and end of file information. The size of a stream file is approximately 1% of the backup job size.</p>
        <h2 MadCap:autonum="">Client component</h2>
        <p class="BodyAfterHead">The client component or <MadCap:variable name="HSS.tn" /> agent is connected to the <MadCap:variable name="HSS.hys_exe" /> and responsible for sending data to the server. The client:</p>
        <p class="Bulleted" MadCap:autonum="• ">Segments the backup streams into variable block size of up to 256 KB. </p>
        <p class="Bulleted" MadCap:autonum="• ">Computes a digest for each block and queries the server to find out if the block is already present in the repository.</p>
        <p class="Bulleted" MadCap:autonum="• ">Sends new blocks, digests and associated metadata to the server. All digests and metadata for a single backup stream are kept in one stream file.</p>
    </body>
</html>